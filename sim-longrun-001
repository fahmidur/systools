#!/usr/bin/env perl

use strict;
use warnings;
use Time::HiRes qw(sleep);

our @colors = (31, 32, 33, 34, 91, 92, 93, 94, 95, 96);
our @letters = ('A'..'Z');
our @numbers = (0..9);
our @alphabet =  (@letters, @numbers);

sub die_with_usage {
  my $err = shift;
  printf <<EOF
Usage: $0 <maxseconds>
---

Simulate some long running verbose process with colorful
progress indicators.

EOF
  ;
  if(defined($err)) {
    printf("---\nERROR: %s\n", $err);
  }
  exit(1);
}

sub random_word {
  my $size = shift;
  if (!defined($size)) {
    $size = 2 + rand(10);
  }
  my @out = ();
  push(@out, $alphabet[rand($#letters+1)]);
  for(my $i = 1; $i < $size; $i++) {
    push(@out, $alphabet[rand($#alphabet+1)]);
  }
  return join('', @out);
}

sub random_color_code {
  return $colors[rand($#colors+1)];
}

sub backspace {
  my $times = shift;
  for (1 .. $times) {
    print(chr(8));
  }
}

sub now() {
  return Time::HiRes::time();
}

#--- main
$| = 1; # flush after every print
my $slept = 0;
my $maxseconds = $ARGV[0];
unless($maxseconds){
  die_with_usage("maxseconds is required");
}

our $time_beg = now();
our $time_end = $time_beg + $maxseconds;
our $time_dif = $time_end-$time_beg;
#print "time_beg=", $time_beg, "\n";
#print "time_end=", $time_end, "\n";
#print "time_dif=", $time_dif, "\n";
#print "---\n";
our $progress_bsize = "%0".(1+2*length("$time_dif")).".2";
our $progress_stamp = "";
our @progress_sizes = ();
sub progress_erase {
  if(scalar(@progress_sizes) <= 0) { return; }
  my $progress_size_last = $progress_sizes[$#progress_sizes];
  if($progress_size_last < 0) {
    return; # progress is dirty
  }
  backspace($progress_size_last);
  #print("<-(", $progress_size_last, ")");
  pop(@progress_sizes);
}
sub progress_print {
  my $update = shift;
  if($update) { progress_erase();}
  my $numer = now() - $time_beg;    # relative seconds elapsed
  my $denom = $time_end - $time_beg; # total seconds
  $progress_stamp = sprintf(" [${progress_bsize}f/${progress_bsize}f] ", $numer, $denom);
  print($progress_stamp);
  push(@progress_sizes, length($progress_stamp));
}

my $word;
my $sleep_time = 0;
my $progress = "";
my $loop_count = 0;
my $curr_newline = 1;
my $prev_newline = 1;
my $progress_2  = "";
while($slept < $maxseconds) {
  $curr_newline = rand() > 0.5 ? 1 : 0;

  if($prev_newline || $loop_count == 0) {
    progress_print(0);
  } else {
    progress_erase();
  }

  $sleep_time = rand() > 0.9 ? 2*rand() : 0.05;
  if($slept + $sleep_time > $maxseconds) {
    $sleep_time = $maxseconds - $slept;
  }

  $word = random_word();

  print("\e[".random_color_code()."m");
  print "$word $sleep_time";
  print("\e[0m");
  progress_print();

  #--- { BEG. CRITICAL_SECTION {
  sleep($sleep_time);
  #--- } BEG. CRITICAL_SECTION }

  progress_print(1);

  if($curr_newline) {
    print("\n");
  } else {
    print(" ");
  }

  #---
  $prev_newline = $curr_newline;
  $slept += $sleep_time;
  $loop_count++;
}

unless($prev_newline) { print("\n"); }
progress_print(); print("DONE\n");
