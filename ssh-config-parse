#!/usr/bin/env ruby

require 'json'
require 'getoptlong'

def die_with_usage(err=nil, ecode=1)
  name = File.basename($0)
  puts "Usage: #{name} [-c /path/to/ssh/conf]"
  puts
  puts <<~EOF
    -h, --help
      
      Print this help message.

    -c, --config        

      Path to SSH config file.
      Defaults to $HOME/.ssh/config

    -m, --mode
      
      Set the mode. Defaults to 'praw'.
      Valid modes are:

        'praw'  -- Print output raw. 
        'pjson' -- Print output as JSON.
      
      A mode is required. 

    -t, --tag
      
      ssh-config-parse allows extending the normal config file
      with tags with a '#Tag' field. 

      Example:
      ```
      Host server_nickname
      HostName server_real_hostname
      #Tag <whatever-tag-you-like>
      ```

      You can filter the output with these tag names
      using this -t, --tag flag. 

    -f, --field
      
      Output only the selected field. 
      In mode=praw,  
        it will output one line per field. 
      In mode=pjson, 
        it will output the fields as a JSON array. 

    -j, --json
      
      Shorthand for mode=pjson, will 
      output in JSON whenever possible.

  EOF
  if err
    puts "\n---\nERROR: #{err}"
  end
  exit(ecode)
end

#--- main

icpath = nil

opts = GetoptLong.new(
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--config', '-c', GetoptLong::REQUIRED_ARGUMENT],
  ['--mode', '-m', GetoptLong::REQUIRED_ARGUMENT],
  ['--tag', '-t', GetoptLong::REQUIRED_ARGUMENT],
  ['--field', '-f', GetoptLong::REQUIRED_ARGUMENT],
  ['--json', '-j', GetoptLong::NO_ARGUMENT],
)

filter_tag = nil
map_field = nil
valid_modes = [:pjson, :praw]
mode = :praw

opts.each do |opt, arg|
  case opt
  when '--help'
    die_with_usage()
  when '--config'
    icpath = arg
  when '--mode'
    imode = arg.to_sym
    unless valid_modes.member?(imode)
      die_with_usage("Invalid mode=#{imode}")
    end
    mode = imode
  when '--tag'
    filter_tag = arg
  when '--field'
    map_field = arg
  when '--json'
    mode = :pjson
  else
    # that's fine
  end
end

unless icpath
  icpath = ENV['HOME'] + '/.ssh/config'
end

unless File.exist?(icpath)
  die_with_usage "ERROR: No such file at #{icpath}"
end

hosts = {}
inhost = nil
icfile = File.open(icpath)
icfile.each_line do |line|
  if line =~ /^\s*#Tag (\w+)/i && inhost
    inhost[:_tags] ||= []
    inhost[:_tags] << $1.strip
    inhost[:_tags].uniq!
  end
  next if line =~ /^#/
  #puts "line: #{line}"
  if line =~ /^Host\s+(.+)$/
    if inhost
      hosts[inhost['Host']] = inhost
      inhost = nil
    end
    inhost = {
      'Host' => $1.strip
    }
  end
  if inhost && line =~ /^\s*(\w+) (.+)/
    inhost[$1.strip] = $2.strip
  end
end
if inhost
  hosts[inhost['Host']] = inhost
end

#--- FILTER
if filter_tag
  hosts.select! do |k,v|
    v[:_tags]&.member?(filter_tag)
  end
end

#--- MAP
out = hosts
if map_field
  out = hosts.map do |k, v|
    x = v[map_field] || v[map_field.to_sym]
  end
end

if mode == :pjson
  puts JSON.pretty_generate(out)
elsif mode == :praw
  if map_field && out.is_a?(Array)
    puts out
  elsif out.is_a?(Hash)
    i = 0
    out.each do |nick, data|
      puts if i > 0
      data.each do |k, v|
        next if k[0] == "_"
        puts "#{k} #{v}"
      end
      if data[:_tags]
        data[:_tags].each do |tag|
          puts "#Tag #{tag}"
        end
      end
      i += 1
    end
  end
else
  die_with_usage("Mode unimplemented. mode=#{mode}") if mode
  die_with_usage()
end
