#!/usr/bin/env ruby

require 'find'
require 'digest'

def hash_list
  Hash.new {|h,k| h[k] = []; }
end

$hash_calc_count = 0
# $files_by_path = hash_list
$files_by_size = hash_list
$files_by_hash = hash_list

class FoundFile
  attr_reader :path
  attr_reader :size
  def initialize(path)
    @path = path
    @size = File.size(path)
    @hash_cache = nil
  end
  def to_s
    @path
  end
  def get_hash
    return @hash_cache if @hash_cache != nil
    $hash_calc_count += 1
    @hash_cache = Digest::MD5.file(@path).hexdigest
  end
end

Find.find('.') do |path|
  next if File.directory?(path)
  next if File.symlink?(path)
  file = FoundFile.new(path)
  # $files_by_path[file.path] << file
  $files_by_size[file.size] << file
end

$files_by_size.each do |size, files|
  next if files.size == 1
  files.each do |f|
    hash = f.get_hash()
    $files_by_hash[hash] << f
  end
end

dups_count = 0
$files_by_hash.each do |hash, files|
  next if files.size == 1
  files.each do |f|
    puts f
    dups_count += 1
  end
  puts "---"
end

wasted_hash_calcs = $hash_calc_count - dups_count
puts "="*40
puts "dups_count: #{dups_count}"
puts "wasted_hash_calcs: #{wasted_hash_calcs}"

