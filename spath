#!/usr/bin/env ruby

require 'pathname'

#------------------------------------------------------------------------------
def which(cmd)
  exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exts.each { |ext|
      exe = File.join(path, "#{cmd}#{ext}")
      return exe if File.executable?(exe) && !File.directory?(exe)
    }
  end
  return nil
end
def find_selector_command
  return "xsel -ib" if which("xsel")
  return "pbcopy"   if which("pbcopy")
  return nil
end
def bash_safe?(x)
  !!(x =~ /^[a-zA-Z0-9,._+:\/\-]+$/)
end
def make_paste_safe(x)
  return x if bash_safe?(x)
  return "'#{x}'" unless x.include?("'")
  return "\"#{x}\"" unless x.include?('"')
  return x
end
#------------------------------------------------------------------------------

if ['-h', '--help'].member?(ARGV[0])
  name = File.basename($0)
  puts <<~EOF
    Usage: #{name} [path]

    Copies the absolute path to the target directory 
    to the system clipboard. 
    If path is not given, it defaults to current directory.

  EOF
end

path_strings = []

if ARGV.size > 0
  ARGV.each do |e|
    path = File.absolute_path(e)
    next unless File.exist?(path)
    path_strings.push(make_paste_safe(path))
  end
else
  path_strings.push(make_paste_safe(Dir.pwd))
end

if path_strings.size == 0
  exit 1
end

selector_command = find_selector_command()
if selector_command
  IO.popen(selector_command, 'w') {|p| p.print(path_strings.join("\n")) }
end

puts(path_strings)

exit 0
